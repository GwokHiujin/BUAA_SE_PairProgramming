        -:    0:Source:D:/miao/SCHOOL/BUAA/Junior(last)/SE/pairProgramming/BUAA_SE_PairProgramming/src/api.cpp
        -:    0:Graph:D:\miao\SCHOOL\BUAA\Junior(last)\SE\pairProgramming\BUAA_SE_PairProgramming\src\cmake-build-debug-coverage\CMakeFiles\cmakeTest.dir\api.cpp.gcno
        -:    0:Data:D:\miao\SCHOOL\BUAA\Junior(last)\SE\pairProgramming\BUAA_SE_PairProgramming\src\cmake-build-debug-coverage\CMakeFiles\cmakeTest.dir\api.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:ï»¿#include "include/api.h"
        -:    2:#include "include/paramParser.h"
        -:    3:#include "include/engine.h"
        -:    4:#include "include/bugReport.h"
        -:    5:#include <ctime>
        -:    6:
        -:    7:double timeCost;
        -:    8:char *apiResult[20005];
        -:    9:int apiLen = 0;
        -:   10:
function gen_chains_all called 1 returned 100% blocks executed 56%
        1:   11:extern "C" __declspec(dllexport) int gen_chains_all(const char *words, int len, char *result[]) {
        1:   12:    len = 0;
        1:   13:    rawWords.clear();
        1:   13-block  0
call    0 returned 1
    20006:   14:    for (auto &i: apiResult) {
    20006:   14-block  0
branch  0 taken 20005 (fallthrough)
branch  1 taken 1
    20005:   15:        i = nullptr;
    20005:   15-block  0
        -:   16:    }
        -:   17:    try {
        -:   18:        paramParser parser = paramParser();
        -:   19:
        1:   20:        clock_t t1 = clock();
        1:   20-block  0
call    0 returned 1
        1:   21:        parser.parseWords(words);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   21-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   21-block  1
call    7 returned 1
call    8 returned 1
    $$$$$:   21-block  2
call    9 never executed
    $$$$$:   21-block  3
    $$$$$:   21-block  4
call   10 never executed
    $$$$$:   21-block  5
        1:   22:        int options[8] = {0};
        1:   23:        options[OP_N] = 1;
        1:   24:        len = engine(options, result);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25:        clock_t t2 = clock();
        1:   25-block  0
call    0 returned 1
        1:   26:        timeCost = (double) (t2 - t1) / CLOCKS_PER_SEC;
    =====:   27:    } catch (bugReport &e) {
    $$$$$:   27-block  0
call    0 never executed
    $$$$$:   27-block  1
call    1 never executed
    $$$$$:   27-block  2
call    2 never executed
    =====:   28:        e.errorReport();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   29:    }
        -:   30:
       1*:   31:    for (int i = 0; i < len; i++) {
        1:   31-block  0
        1:   31-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   32:        apiResult[i] = result[i];
    %%%%%:   32-block  0
        -:   33:    }
        1:   34:    apiLen = len;
        1:   35:    return len;
        1:   35-block  0
        1:   35-block  1
        -:   36:}
        -:   37:
        -:   38:extern "C" __declspec(dllexport) int
function gen_chain_word called 4 returned 100% blocks executed 59%
        4:   39:gen_chain_word(const char *words, int len, char *result[], char head, char tail, char prohibit,
        -:   40:               bool enable_loop) {
        4:   41:    len = 0;
        4:   42:    rawWords.clear();
        4:   42-block  0
call    0 returned 4
    80024:   43:    for (auto &i: apiResult) {
    80024:   43-block  0
branch  0 taken 80020 (fallthrough)
branch  1 taken 4
    80020:   44:        i = nullptr;
    80020:   44-block  0
        -:   45:    }
        -:   46:
        -:   47:    try {
        -:   48:        paramParser parser = paramParser();
        -:   49:
        4:   50:        clock_t t1 = clock();
        4:   50-block  0
call    0 returned 4
        4:   51:        parser.parseWords(words);
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   51-block  0
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:   51-block  1
call    7 returned 4
call    8 returned 4
    $$$$$:   51-block  2
call    9 never executed
    $$$$$:   51-block  3
    $$$$$:   51-block  4
call   10 never executed
    $$$$$:   51-block  5
        4:   52:        int options[8] = {0};
        4:   53:        options[OP_W] = 1;
        4:   54:        options[OP_H] = head;
        4:   55:        options[OP_T] = tail;
        4:   56:        options[OP_J] = prohibit;
        4:   57:        options[OP_R] = enable_loop;
        4:   58:        len = engine(options, result);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   59:        clock_t t2 = clock();
        4:   59-block  0
call    0 returned 4
        4:   60:        timeCost = (double) (t2 - t1) / CLOCKS_PER_SEC;
    =====:   61:    } catch (bugReport &e) {
    $$$$$:   61-block  0
call    0 never executed
    $$$$$:   61-block  1
call    1 never executed
    $$$$$:   61-block  2
call    2 never executed
    =====:   62:        e.errorReport();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   63:    }
        -:   64:
       20:   65:    for (int i = 0; i < len; i++) {
        4:   65-block  0
       20:   65-block  1
branch  0 taken 16 (fallthrough)
branch  1 taken 4
       16:   66:        apiResult[i] = result[i];
       16:   66-block  0
        -:   67:    }
        4:   68:    apiLen = len;
        4:   69:    return len;
        4:   69-block  0
        4:   69-block  1
        -:   70:}
        -:   71:
        -:   72:extern "C" __declspec(dllexport) int
function gen_chain_char called 5 returned 100% blocks executed 59%
        5:   73:gen_chain_char(const char *words, int len, char *result[], char head, char tail, char prohibit,
        -:   74:               bool enable_loop) {
        5:   75:    len = 0;
        5:   76:    rawWords.clear();
        5:   76-block  0
call    0 returned 5
   100030:   77:    for (auto &i: apiResult) {
   100030:   77-block  0
branch  0 taken 100025 (fallthrough)
branch  1 taken 5
   100025:   78:        i = nullptr;
   100025:   78-block  0
        -:   79:    }
        -:   80:
        -:   81:    try {
        -:   82:        paramParser parser = paramParser();
        5:   83:        clock_t t1 = clock();
        5:   83-block  0
call    0 returned 5
        5:   84:        parser.parseWords(words);
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:   84-block  0
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:   84-block  1
call    7 returned 5
call    8 returned 5
    $$$$$:   84-block  2
call    9 never executed
    $$$$$:   84-block  3
    $$$$$:   84-block  4
call   10 never executed
    $$$$$:   84-block  5
        5:   85:        int options[8] = {0};
        5:   86:        options[OP_C] = 1;
        5:   87:        options[OP_H] = head;
        5:   88:        options[OP_T] = tail;
        5:   89:        options[OP_J] = prohibit;
        5:   90:        options[OP_R] = enable_loop;
        5:   91:        len = engine(options, result);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:   92:
        5:   93:        clock_t t2 = clock();
        5:   93-block  0
call    0 returned 5
        5:   94:        timeCost = (double) (t2 - t1) / CLOCKS_PER_SEC;
    =====:   95:    } catch (bugReport &e) {
    $$$$$:   95-block  0
call    0 never executed
    $$$$$:   95-block  1
call    1 never executed
    $$$$$:   95-block  2
call    2 never executed
    =====:   96:        e.errorReport();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   97:    }
        -:   98:
       17:   99:    for (int i = 0; i < len; i++) {
        5:   99-block  0
       17:   99-block  1
branch  0 taken 12 (fallthrough)
branch  1 taken 5
       12:  100:        apiResult[i] = result[i];
       12:  100-block  0
        -:  101:    }
        5:  102:    apiLen = len;
        5:  103:    return len;
        5:  103-block  0
        5:  103-block  1
        -:  104:}
        -:  105:
function get_execution_time called 0 returned 0% blocks executed 0%
    #####:  106:extern "C" __declspec(dllexport) double get_execution_time() {
    #####:  107:    return timeCost;
    %%%%%:  107-block  0
        -:  108:}
        -:  109:
function _Z19stringToCharStarTmpNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  110:char *stringToCharStarTmp(string a) {
    #####:  111:    char *ans = (char *) malloc(a.length() + 1);
    %%%%%:  111-block  0
call    0 never executed
    #####:  112:    int k = 0;
    #####:  113:    for (k = 0; k < a.length(); k++) {
    %%%%%:  113-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  114:        ans[k] = a[k];
    %%%%%:  114-block  0
call    0 never executed
        -:  115:    }
    #####:  116:    ans[k] = 0;
    #####:  117:    return ans;
    %%%%%:  117-block  0
        -:  118:}
        -:  119:
function getResult called 0 returned 0% blocks executed 0%
    #####:  120:extern "C" __declspec(dllexport) char *getResult() {
    #####:  121:    string str;
    %%%%%:  121-block  0
call    0 never executed
    $$$$$:  121-block  1
call    1 never executed
    #####:  122:    for (int i = 0; i < apiLen; i++) {
    %%%%%:  122-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  122-block  1
    #####:  123:        str += apiResult[i];
    %%%%%:  123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  124:        str += '\n';
    %%%%%:  124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  125:    }
    #####:  126:    return stringToCharStarTmp(str);
    %%%%%:  126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  126-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  126-block  2
    %%%%%:  126-block  3
call    6 never executed
call    7 never executed
    %%%%%:  126-block  4
    $$$$$:  126-block  5
call    8 never executed
    $$$$$:  126-block  6
        -:  127:}
