        -:    0:Source:D:/Tools/x86_64-8.1.0-release-posix-seh-rt_v6-rev0/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/ext/new_allocator.h
        -:    0:Graph:D:\miao\SCHOOL\BUAA\Junior(last)\SE\pairProgramming\BUAA_SE_PairProgramming\src\cmake-build-debug-coverage\CMakeFiles\cmakeTest.dir\engine.cpp.gcno
        -:    0:Data:D:\miao\SCHOOL\BUAA\Junior(last)\SE\pairProgramming\BUAA_SE_PairProgramming\src\cmake-build-debug-coverage\CMakeFiles\cmakeTest.dir\engine.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard.
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:	struct rebind
        -:   71:	{ typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
    3675*:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC2Ev called 22 returned 100% blocks executed 100%
       22:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 21 returned 100% blocks executed 100%
       21:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIiEC2Ev called 5 returned 100% blocks executed 100%
        5:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEEC2Ev called 3626 returned 100% blocks executed 100%
     3626:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
function _ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
        -:   82:
        -:   83:      template<typename _Tp1>
        -:   84:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   85:
  196581*:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED2Ev:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED2Ev called 22 returned 100% blocks executed 100%
       22:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 196559 returned 100% blocks executed 100%
   196559:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiED2Ev:
function _ZN9__gnu_cxx13new_allocatorIiED2Ev called 0 returned 0% blocks executed 0%
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEED2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEED2Ev called 0 returned 0% blocks executed 0%
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEED2Ev called 0 returned 0% blocks executed 0%
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcED2Ev:
function _ZN9__gnu_cxx13new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   87:
        -:   88:      pointer
        -:   89:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   90:      { return std::__addressof(__x); }
        -:   91:
        -:   92:      const_pointer
        -:   93:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   97:      // about what the return value is when __n == 0.
        -:   98:      pointer
   104086:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
   104086:  101:	if (__n > this->max_size())
    #####:  102:	  std::__throw_bad_alloc();
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
   104086:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEyPKv called 12 returned 100% blocks executed 83%
       12:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       12:  101:	if (__n > this->max_size())
       12:  101-block  0
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
call    0 never executed
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       12:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       12:  111-block  0
call    0 returned 12
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIiE8allocateEyPKv called 17 returned 100% blocks executed 83%
       17:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       17:  101:	if (__n > this->max_size())
       17:  101-block  0
call    0 returned 17
branch  1 taken 0 (fallthrough)
branch  2 taken 17
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
call    0 never executed
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       17:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       17:  111-block  0
call    0 returned 17
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv called 96277 returned 100% blocks executed 83%
    96277:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    96277:  101:	if (__n > this->max_size())
    96277:  101-block  0
call    0 returned 96277
branch  1 taken 0 (fallthrough)
branch  2 taken 96277
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
call    0 never executed
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    96277:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    96277:  111-block  0
call    0 returned 96277
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE8allocateEyPKv called 718 returned 100% blocks executed 83%
      718:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
      718:  101:	if (__n > this->max_size())
      718:  101-block  0
call    0 returned 718
branch  1 taken 0 (fallthrough)
branch  2 taken 718
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
call    0 never executed
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
      718:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      718:  111-block  0
call    0 returned 718
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE8allocateEyPKv called 7062 returned 100% blocks executed 83%
     7062:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
     7062:  101:	if (__n > this->max_size())
     7062:  101-block  0
call    0 returned 7062
branch  1 taken 0 (fallthrough)
branch  2 taken 7062
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
call    0 never executed
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
     7062:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     7062:  111-block  0
call    0 returned 7062
        -:  112:      }
------------------
        -:  113:
        -:  114:      // __p is not permitted to be a null pointer.
        -:  115:      void
   103641:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
   103641:  125:	::operator delete(__p);
   103641:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_y:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_y called 10 returned 100% blocks executed 100%
       10:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       10:  125:	::operator delete(__p);
       10:  125-block  0
call    0 returned 10
       10:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE10deallocateEPS7_y called 6962 returned 100% blocks executed 100%
     6962:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
     6962:  125:	::operator delete(__p);
     6962:  125-block  0
call    0 returned 6962
     6962:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_y called 96272 returned 100% blocks executed 100%
    96272:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    96272:  125:	::operator delete(__p);
    96272:  125-block  0
call    0 returned 96272
    96272:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPiy:
function _ZN9__gnu_cxx13new_allocatorIiE10deallocateEPiy called 13 returned 100% blocks executed 100%
       13:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       13:  125:	::operator delete(__p);
       13:  125-block  0
call    0 returned 13
       13:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE10deallocateEPS2_y called 384 returned 100% blocks executed 100%
      384:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
      384:  125:	::operator delete(__p);
      384:  125-block  0
call    0 returned 384
      384:  126:      }
------------------
        -:  127:
        -:  128:      size_type
   105662:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
   105662:  130:      { return size_t(-1) / sizeof(_Tp); }
------------------
_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8max_sizeEv called 12 returned 100% blocks executed 100%
       12:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       12:  130:      { return size_t(-1) / sizeof(_Tp); }
       12:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv called 51 returned 100% blocks executed 100%
       51:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       51:  130:      { return size_t(-1) / sizeof(_Tp); }
       51:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv called 96383 returned 100% blocks executed 100%
    96383:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    96383:  130:      { return size_t(-1) / sizeof(_Tp); }
    96383:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt4pairIiiEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorISt4pairIiiEE8max_sizeEv called 2154 returned 100% blocks executed 100%
     2154:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
     2154:  130:      { return size_t(-1) / sizeof(_Tp); }
     2154:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE8max_sizeEv called 7062 returned 100% blocks executed 100%
     7062:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
     7062:  130:      { return size_t(-1) / sizeof(_Tp); }
     7062:  130-block  0
------------------
        -:  131:
        -:  132:#if __cplusplus >= 201103L
        -:  133:      template<typename _Up, typename... _Args>
        -:  134:	void
   214433:  135:	construct(_Up* __p, _Args&&... __args)
   214433:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESD_IJEEEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESD_IJEEEEEvPT_DpOT0_ called 7062 returned 100% blocks executed 67%
     7062:  135:	construct(_Up* __p, _Args&&... __args)
     7062:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     7062:  136-block  0
call    0 returned 7062
call    1 returned 7062
call    2 returned 7062
call    3 returned 7062
call    4 returned 7062
call    5 returned 7062
branch  6 taken 7062 (fallthrough)
branch  7 taken 0 (throw)
     7062:  136-block  1
    $$$$$:  136-block  2
call    8 never executed
    $$$$$:  136-block  3
    $$$$$:  136-block  4
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_ called 1276 returned 100% blocks executed 100%
     1276:  135:	construct(_Up* __p, _Args&&... __args)
     1276:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     1276:  136-block  0
call    0 returned 1276
call    1 returned 1276
call    2 returned 1276
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructIS2_JS2_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructIS2_JS2_EEEvPT_DpOT0_ called 6921 returned 100% blocks executed 100%
     6921:  135:	construct(_Up* __p, _Args&&... __args)
     6921:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     6921:  136-block  0
call    0 returned 6921
call    1 returned 6921
------------------
_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_ called 61711 returned 100% blocks executed 100%
    61711:  135:	construct(_Up* __p, _Args&&... __args)
    61711:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    61711:  136-block  0
call    0 returned 61711
call    1 returned 61711
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_ called 131913 returned 100% blocks executed 83%
   131913:  135:	construct(_Up* __p, _Args&&... __args)
   131913:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   131913:  136-block  0
call    0 returned 131913
call    1 returned 131913
call    2 returned 131913
branch  3 taken 131913 (fallthrough)
branch  4 taken 0 (throw)
   131913:  136-block  1
    $$$$$:  136-block  2
call    5 never executed
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE9constructIS2_JRKS2_EEEvPT_DpOT0_ called 5550 returned 100% blocks executed 100%
     5550:  135:	construct(_Up* __p, _Args&&... __args)
     5550:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
     5550:  136-block  0
call    0 returned 5550
call    1 returned 5550
------------------
        -:  137:
        -:  138:      template<typename _Up>
        -:  139:	void
  164894*:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE7destroyIS6_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKPciELb0EEEE7destroyIS6_EEvPT_ called 6962 returned 100% blocks executed 100%
     6962:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_ called 96221 returned 100% blocks executed 100%
    96221:  140:	destroy(_Up* __p) { __p->~_Up(); }
    96221:  140-block  0
call    0 returned 96221
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiiEE7destroyIS2_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiiEE7destroyIS2_EEvPT_ called 0 returned 0% blocks executed 0%
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_:
function _ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_ called 61711 returned 100% blocks executed 100%
    61711:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
        -:  141:#else
        -:  142:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  143:      // 402. wrong new expression in [some_] allocator::construct
        -:  144:      void
        -:  145:      construct(pointer __p, const _Tp& __val)
        -:  146:      { ::new((void *)__p) _Tp(__val); }
        -:  147:
        -:  148:      void
        -:  149:      destroy(pointer __p) { __p->~_Tp(); }
        -:  150:#endif
        -:  151:    };
        -:  152:
        -:  153:  template<typename _Tp>
        -:  154:    inline bool
        -:  155:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  156:    { return true; }
        -:  157:
        -:  158:  template<typename _Tp>
        -:  159:    inline bool
        -:  160:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  161:    { return false; }
        -:  162:
        -:  163:_GLIBCXX_END_NAMESPACE_VERSION
        -:  164:} // namespace
        -:  165:
        -:  166:#endif
